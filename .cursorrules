# Cursor Rules для проекта "Показания счетчиков"

## Общие принципы

### Язык и локализация
- **ВСЕ комментарии в коде должны быть на русском языке**
- **ВСЕ ответы в чате должны быть на русском языке**
- **ВСЕ пользовательские сообщения и интерфейс должны быть на русском языке**
- Используй последовательное мышление (sequential thinking) для сложных задач

### Архитектура и структура
- Следуй принципам модульной архитектуры
- Разделяй логику на отдельные функции с четкими названиями
- Используй константы для магических чисел и строк
- Применяй паттерн "Configuration as Code" для настроек

## Специфичные правила для проекта

### 1. Работа с Appwrite
- **ОБЯЗАТЕЛЬНО** изучай документацию Appwrite через context7 перед реализацией новых функций
- Всегда проверяй загрузку Appwrite SDK перед использованием
- Используй правильную обработку ошибок для всех операций с Appwrite
- Создавай отдельные функции для каждого типа операций с базой данных
- Логируй все операции с Appwrite для отладки

### 2. Обработка данных
- Валидируй все пользовательские данные перед отправкой
- Используй типизированные структуры данных
- Обрабатывай edge cases (пустые значения, некорректные форматы)
- Реализуй кэширование для часто используемых данных

### 3. Пользовательский интерфейс
- Создавай отзывчивый и доступный интерфейс
- Используй семантическую разметку HTML
- Применяй современные CSS-практики (CSS Grid, Flexbox, CSS Variables)
- Обеспечивай консистентность дизайна между страницами

### 4. Безопасность
- Никогда не хардкоди API ключи в коде
- Используй environment variables для конфиденциальных данных
- Валидируй все входные данные на клиенте и сервере
- Применяй принцип наименьших привилегий

### 5. Производительность
- Минимизируй количество запросов к API
- Используй lazy loading для больших данных
- Оптимизируй размеры изображений и ресурсов
- Применяй debouncing для частых операций

## Правила кодирования

### JavaScript
```javascript
// ✅ Правильно - комментарии на русском
/**
 * Загружает список городов из Appwrite
 * @returns {Promise<Array>} Массив городов
 */
async function fetchCities() {
    try {
        console.log('Начинаем загрузку городов...');
        const response = await databases.listDocuments(DATABASE_ID, CITIES_COLLECTION_ID);
        return response.documents;
    } catch (error) {
        console.error('Ошибка загрузки городов:', error);
        throw new Error('Не удалось загрузить список городов');
    }
}

// ❌ Неправильно - комментарии на английском
// Load cities from Appwrite
async function fetchCities() {
    // implementation
}
```

### HTML
```html
<!-- ✅ Правильно - атрибуты на русском -->
<div class="meter-table" role="table" aria-label="Таблица показаний счетчиков">
    <thead>
        <tr>
            <th scope="col">Тип ресурса</th>
            <th scope="col">Дата предыдущих показаний</th>
        </tr>
    </thead>
</div>
```

### CSS
```css
/* ✅ Правильно - комментарии на русском */
/* Стили для таблицы показаний счетчиков */
.meter-table {
    /* Основные стили таблицы */
    border-collapse: collapse;
    width: 100%;
    
    /* Стили для заголовков */
    & th {
        background-color: var(--primary-color);
        color: white;
        padding: 12px;
    }
}
```

## Правила для новых функций

### 1. Планирование
- **ВСЕГДА** создавай план реализации перед написанием кода
- Разбивай сложные задачи на подзадачи
- Определяй входные и выходные данные
- Продумывай обработку ошибок

### 2. Реализация
- Пиши полный код, никогда не используй заглушки типа `// ... rest of the processing ...`
- Добавляй подробное логирование для отладки
- Создавай отдельные функции для каждого логического блока
- Используй современные возможности JavaScript (async/await, destructuring, etc.)

### 3. Тестирование
- Создавай тестовые страницы для новых функций
- Проверяй работу в разных браузерах
- Тестируй edge cases и граничные условия
- Добавляй автоматические проверки валидации

### 4. Документация
- Обновляй README.md при добавлении новых функций
- Документируй API и интерфейсы
- Создавай примеры использования
- Описывай процесс развертывания

## Специфичные правила для модулей

### Appwrite конфигурация (appwrite-config.js)
- Централизуй все настройки Appwrite
- Создавай функции для инициализации и проверки подключения
- Обеспечивай глобальную доступность констант
- Реализуй механизм retry для неудачных подключений

### Основная логика (script-appwrite.js)
- Разделяй логику на модули (города, счетчики, показания, тарифы)
- Используй паттерн Observer для обновления UI
- Реализуй кэширование данных
- Добавляй индикаторы загрузки

### История показаний (appwrite-history.js)
- Реализуй эффективную фильтрацию и поиск
- Добавляй пагинацию для больших объемов данных
- Создавай экспорт данных в различные форматы
- Реализуй сортировку по различным критериям

### Управление тарифами (appwrite-tariffs.js)
- Валидируй тарифы на стороне клиента
- Реализуй версионирование тарифов
- Добавляй аудит изменений
- Создавай предварительный просмотр изменений

## Правила для отладки

### Логирование
```javascript
// ✅ Правильно - структурированное логирование
console.log('=== ЗАГРУЗКА ГОРОДОВ ===');
console.log('DATABASE_ID:', DATABASE_ID);
console.log('COLLECTION_ID:', CITIES_COLLECTION_ID);

try {
    const cities = await fetchCities();
    console.log('Города загружены успешно:', cities.length);
} catch (error) {
    console.error('Ошибка загрузки городов:', error);
    console.error('Детали ошибки:', {
        message: error.message,
        code: error.code,
        response: error.response
    });
}
```

### Обработка ошибок
```javascript
// ✅ Правильно - детальная обработка ошибок
async function saveMeterReading(readingData) {
    try {
        // Валидация данных
        if (!readingData.meterId || !readingData.reading) {
            throw new Error('Отсутствуют обязательные поля');
        }
        
        // Сохранение данных
        const result = await databases.createDocument(
            DATABASE_ID,
            METER_READINGS_COLLECTION_ID,
            ID.unique(),
            readingData
        );
        
        console.log('Показания сохранены:', result.$id);
        return result;
        
    } catch (error) {
        console.error('Ошибка сохранения показаний:', error);
        
        // Пользовательское сообщение об ошибке
        const userMessage = getErrorMessage(error);
        showNotification(userMessage, 'error');
        
        throw error;
    }
}
```

## Правила для UI/UX

### Уведомления
- Используй консистентную систему уведомлений
- Показывай прогресс для длительных операций
- Предоставляй понятные сообщения об ошибках
- Добавляй подтверждения для критических операций

### Формы
- Валидируй данные в реальном времени
- Показывай ошибки валидации рядом с полями
- Используй autocomplete для часто вводимых данных
- Добавляй подсказки и примеры

### Таблицы
- Реализуй сортировку и фильтрацию
- Добавляй пагинацию для больших таблиц
- Используй sticky headers для длинных таблиц
- Обеспечивай доступность с клавиатуры

## Заключение

Следуй этим правилам для создания качественного, поддерживаемого и масштабируемого кода. Помни, что главная цель - создание удобного и надежного приложения для пользователей.
