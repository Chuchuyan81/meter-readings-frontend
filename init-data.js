// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Appwrite
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Appwrite
const { Client, Databases, ID } = Appwrite;

const client = new Client();
const databases = new Databases(client);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
client
    .setEndpoint(APPWRITE_CONFIG.endpoint)
    .setProject(APPWRITE_CONFIG.projectId);

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const INITIAL_DATA = {
    cities: [
        { name: '–ú–æ—Å–∫–≤–∞' },
        { name: '–°–ü–±, –ö—É–∑–Ω–µ—Ü–æ–≤–∞ 45' },
        { name: '–¢—É–ª–∞' }
    ],
    meterTypes: [
        { name: '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ' },
        { name: '–≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞' },
        { name: '—Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞' }
    ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
async function createCities() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤...');
    const createdCities = [];
    
    for (const city of INITIAL_DATA.cities) {
        try {
            const response = await databases.createDocument(
                APPWRITE_CONFIG.databaseId,
                APPWRITE_CONFIG.collections.cities,
                Appwrite.ID.unique(),
                city
            );
            createdCities.push(response);
            console.log(`‚úì –ì–æ—Ä–æ–¥ —Å–æ–∑–¥–∞–Ω: ${city.name}`);
        } catch (error) {
            console.error(`‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ ${city.name}:`, error);
        }
    }
    
    return createdCities;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤
async function createMeterTypes() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤...');
    const createdTypes = [];
    
    for (const meterType of INITIAL_DATA.meterTypes) {
        try {
            const response = await databases.createDocument(
                APPWRITE_CONFIG.databaseId,
                APPWRITE_CONFIG.collections.meterTypes,
                Appwrite.ID.unique(),
                meterType
            );
            createdTypes.push(response);
            console.log(`‚úì –¢–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–∑–¥–∞–Ω: ${meterType.name}`);
        } catch (error) {
            console.error(`‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ —Å—á–µ—Ç—á–∏–∫–∞ ${meterType.name}:`, error);
        }
    }
    
    return createdTypes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤
async function createSampleMeters(cities, meterTypes) {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤...');
    
    const currentDate = new Date().toISOString();
    
    for (const city of cities) {
        for (const meterType of meterTypes) {
            try {
                const meterData = {
                    city_id: city.$id,
                    meter_type_id: meterType.$id,
                    prev_date: currentDate,
                    prev_reading: 0
                };
                
                const response = await databases.createDocument(
                    APPWRITE_CONFIG.databaseId,
                    APPWRITE_CONFIG.collections.meters,
                    Appwrite.ID.unique(),
                    meterData
                );
                
                console.log(`‚úì –°—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω: ${city.name} - ${meterType.name}`);
            } catch (error) {
                console.error(`‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ ${city.name} - ${meterType.name}:`, error);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤
async function createSampleTariffs(cities, meterTypes) {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤...');
    
    const currentDate = new Date().toISOString();
    
    // –ü—Ä–∏–º–µ—Ä—ã —Ç–∞—Ä–∏—Ñ–æ–≤
    const tariffRates = {
        '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ': 5.47,
        '–≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞': 185.50,
        '—Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞': 42.30
    };
    
    for (const city of cities) {
        for (const meterType of meterTypes) {
            try {
                const tariffData = {
                    city_id: city.$id,
                    meter_type_id: meterType.$id,
                    tariff: tariffRates[meterType.name] || 1.0,
                    start_date: currentDate,
                    end_date: null
                };
                
                const response = await databases.createDocument(
                    APPWRITE_CONFIG.databaseId,
                    APPWRITE_CONFIG.collections.tariffs,
                    Appwrite.ID.unique(),
                    tariffData
                );
                
                console.log(`‚úì –¢–∞—Ä–∏—Ñ —Å–æ–∑–¥–∞–Ω: ${city.name} - ${meterType.name} - ${tariffData.tariff}`);
            } catch (error) {
                console.error(`‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ ${city.name} - ${meterType.name}:`, error);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function checkExistingData() {
    try {
        const citiesResponse = await databases.listDocuments(
            APPWRITE_CONFIG.databaseId,
            APPWRITE_CONFIG.collections.cities
        );
        
        const meterTypesResponse = await databases.listDocuments(
            APPWRITE_CONFIG.databaseId,
            APPWRITE_CONFIG.collections.meterTypes
        );
        
        return {
            cities: citiesResponse.documents.length,
            meterTypes: meterTypesResponse.documents.length
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        return { cities: 0, meterTypes: 0 };
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeData() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        const existing = await checkExistingData();
        console.log(`–ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: ${existing.cities}, —Ç–∏–ø–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤: ${existing.meterTypes}`);
        
        let cities = [];
        let meterTypes = [];
        
        // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (existing.cities === 0) {
            cities = await createCities();
        } else {
            console.log('–ì–æ—Ä–æ–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
            const citiesResponse = await databases.listDocuments(
                APPWRITE_CONFIG.databaseId,
                APPWRITE_CONFIG.collections.cities
            );
            cities = citiesResponse.documents;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —Å—á–µ—Ç—á–∏–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (existing.meterTypes === 0) {
            meterTypes = await createMeterTypes();
        } else {
            console.log('–¢–∏–ø—ã —Å—á–µ—Ç—á–∏–∫–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
            const meterTypesResponse = await databases.listDocuments(
                APPWRITE_CONFIG.databaseId,
                APPWRITE_CONFIG.collections.meterTypes
            );
            meterTypes = meterTypesResponse.documents;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏ —Ç–∞—Ä–∏—Ñ–æ–≤
        await createSampleMeters(cities, meterTypes);
        await createSampleTariffs(cities, meterTypes);
        
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        console.log('\nüìä –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
        console.log(`–ì–æ—Ä–æ–¥–æ–≤: ${cities.length}`);
        console.log(`–¢–∏–ø–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤: ${meterTypes.length}`);
        console.log(`–°—á–µ—Ç—á–∏–∫–æ–≤: ${cities.length * meterTypes.length}`);
        console.log(`–¢–∞—Ä–∏—Ñ–æ–≤: ${cities.length * meterTypes.length}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
async function clearAllData() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const collections = [
        APPWRITE_CONFIG.collections.meterReadings,
        APPWRITE_CONFIG.collections.tariffs,
        APPWRITE_CONFIG.collections.meters,
        APPWRITE_CONFIG.collections.meterTypes,
        APPWRITE_CONFIG.collections.cities
    ];
    
    for (const collectionId of collections) {
        try {
            const response = await databases.listDocuments(
                APPWRITE_CONFIG.databaseId,
                collectionId
            );
            
            for (const document of response.documents) {
                await databases.deleteDocument(
                    APPWRITE_CONFIG.databaseId,
                    collectionId,
                    document.$id
                );
            }
            
            console.log(`‚úì –û—á–∏—â–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: ${collectionId}`);
        } catch (error) {
            console.error(`‚úó –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collectionId}:`, error);
        }
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
window.initializeData = initializeData;
window.clearAllData = clearAllData;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
// document.addEventListener('DOMContentLoaded', initializeData);

console.log('üîß –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω!');
console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: initializeData()');
console.log('–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: clearAllData()'); 